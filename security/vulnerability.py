"""
Vulnerability checking module
"""
import re
import requests
from typing import List, Optional
from config import vulnerability_config
from core.models import VulnerabilityInfo

class VulnerabilityChecker:
    """OSV API를 사용한 취약점 검사"""
    
    def __init__(self):
        self.config = vulnerability_config
    
    def check_package(self, package_name: str, version: str) -> List[VulnerabilityInfo]:
        """패키지의 취약점 검사"""
        if not version or not package_name:
            return []
        
        clean_version = re.sub(r'[><=!~^]', '', version).strip()
        
        if not clean_version or not re.match(r'^\d+(\.\d+)*', clean_version):
            return []
        
        try:
            payload = {
                "package": {"name": package_name, "ecosystem": "PyPI"},
                "version": clean_version
            }
            
            response = requests.post(
                self.config.OSV_API_URL, 
                json=payload, 
                timeout=self.config.TIMEOUT
            )
            
            if response.status_code != 200:
                return []
            
            data = response.json()
            vulnerabilities = []
            
            for vuln in data.get("vulns", []):
                vuln_info = VulnerabilityInfo(
                    id=vuln.get("id", "Unknown"),
                    summary=vuln.get("summary", vuln.get("details", "No description")),
                    severity=self._get_severity(vuln),
                    fixed_version=self._get_fixed_version(vuln, package_name),
                    published_date=vuln.get("published", "")
                )
                vulnerabilities.append(vuln_info)
            
            return vulnerabilities
            
        except:
            return []
    
    def _get_severity(self, vuln_data: dict) -> str:
        """취약점 심각도 판단"""
        severity_data = vuln_data.get("severity", [])
        
        for sev in severity_data:
            if sev.get("type") == "CVSS_V3":
                try:
                    score = float(sev.get("score", 0))
                    if score >= 9.0: return "CRITICAL"
                    elif score >= 7.0: return "HIGH"
                    elif score >= 4.0: return "MEDIUM"
                    else: return "LOW"
                except:
                    continue
        return "MEDIUM"
    
    def _get_fixed_version(self, vuln_data: dict, package_name: str) -> Optional[str]:
        """수정된 버전 찾기"""
        for aff in vuln_data.get("affected", []):
            if aff.get("package", {}).get("name") == package_name:
                for r in aff.get("ranges", []):
                    for event in r.get("events", []):
                        if "fixed" in event:
                            return event["fixed"]
        return None

def check_vulnerabilities(packages: List[dict], analyzer_result: dict) -> dict:
    """패키지 목록의 취약점 검사"""
    checker = VulnerabilityChecker()
    total_vulnerabilities = 0
    
    for pkg in packages:
        if pkg.get("version") and pkg.get("status") == "✅ 버전 확인됨":
            vulns = checker.check_package(pkg["install_name"], pkg["version"])
            if vulns:
                pkg["vulnerabilities"] = [
                    {
                        "id": v.id,
                        "summary": v.summary[:100] + "..." if len(v.summary) > 100 else v.summary,
                        "severity": v.severity,
                        "fixed_version": v.fixed_version
                    }
                    for v in vulns
                ]
                pkg["status"] = f"⚠️ 취약점 {len(vulns)}개 발견"
                total_vulnerabilities += len(vulns)
    
    analyzer_result["summary"]["total_vulnerabilities"] = total_vulnerabilities
    analyzer_result["summary"]["vulnerable_packages"] = sum(1 for p in packages if p.get("vulnerabilities"))
    
    return analyzer_result