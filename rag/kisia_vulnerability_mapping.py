# rag/kisia_vulnerability_mapping.py
"""
KISIA 가이드라인 취약점 타입 매핑
PDF 목차 기반 정확한 매핑 테이블
"""

class KISIAVulnerabilityMapper:
    """KISIA 가이드라인 취약점 매핑"""
    
    def __init__(self):
        # KISIA 가이드라인 목차 구조
        self.GUIDELINE_STRUCTURE = {
            "제1절 입력데이터 검증 및 표현": {
                1: ("SQL 삽입", "SQL_Injection", 8),
                2: ("코드 삽입", "Code_Injection", 14),
                3: ("경로 조작 및 자원 삽입", "Path_Traversal", 18),
                4: ("크로스사이트 스크립트", "XSS", 22),
                5: ("운영체제 명령어 삽입", "Command_Injection", 29),
                6: ("위험한 형식 파일 업로드", "File_Upload", 33),
                7: ("신뢰되지 않은 URL주소로 자동접속 연결", "Open_Redirect", 36),
                8: ("부적절한 XML 외부 개체 참조", "XXE", 39),
                9: ("XML 삽입", "XML_Injection", 42),
                10: ("LDAP 삽입", "LDAP_Injection", 44),
                11: ("크로스사이트 요청 위조", "CSRF", 48),
                12: ("서버사이드 요청 위조", "SSRF", 55),
                13: ("HTTP 응답분할", "HTTP_Response_Splitting", 58),
                14: ("정수형 오버플로우", "Integer_Overflow", 61),
                15: ("보안기능 결정에 사용되는 부적절한 입력값", "Input_Validation", 64),
                16: ("포맷 스트링 삽입", "Format_String", 67)
            },
            "제2절 보안기능": {
                1: ("적절한 인증 없는 중요 기능 허용", "Missing_Authentication", 69),
                2: ("부적절한 인가", "Improper_Authorization", 72),
                3: ("중요한 자원에 대한 잘못된 권한 설정", "Incorrect_Permission", 75),
                4: ("취약한 암호화 알고리즘 사용", "Weak_Cryptography", 77),
                5: ("암호화되지 않은 중요정보", "Unencrypted_Data", 81),
                6: ("하드코드된 중요정보", "Hardcoded_Secrets", 85),
                7: ("충분하지 않은 키 길이 사용", "Insufficient_Key_Length", 88),
                8: ("적절하지 않은 난수 값 사용", "Weak_Random", 91),
                9: ("취약한 패스워드 허용", "Weak_Password", 94),
                10: ("부적절한 전자서명 확인", "Improper_Signature_Verification", 98),
                11: ("부적절한 인증서 유효성 검증", "Improper_Certificate_Validation", 102),
                12: ("사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출", "Cookie_Exposure", 106),
                13: ("주석문 안에 포함된 시스템 주요정보", "Information_in_Comments", 109),
                14: ("솔트 없이 일방향 해시 함수 사용", "Missing_Salt", 111),
                15: ("무결성 검사없는 코드 다운로드", "Unverified_Download", 113),
                16: ("반복된 인증시도 제한 기능 부재", "Missing_Brute_Force_Protection", 116)
            },
            "제3절 시간 및 상태": {
                1: ("경쟁조건: 검사시점과 사용시점", "TOCTOU", 119),
                2: ("종료되지 않는 반복문 또는 재귀 함수", "Infinite_Loop", 122)
            },
            "제4절 에러처리": {
                1: ("오류 메시지 정보노출", "Error_Message_Exposure", 125),
                2: ("오류상황 대응 부재", "Missing_Error_Handling", 129),
                3: ("부적절한 예외 처리", "Improper_Exception_Handling", 132)
            },
            "제5절 코드오류": {
                1: ("Null Pointer 역참조", "Null_Pointer_Dereference", 134),
                2: ("부적절한 자원 해제", "Improper_Resource_Release", 137),
                3: ("신뢰할 수 없는 데이터의 역직렬화", "Unsafe_Deserialization", 140)
            },
            "제6절 캡슐화": {
                1: ("잘못된 세션에 의한 데이터 정보 노출", "Session_Data_Exposure", 143),
                2: ("제거되지 않고 남은 디버그 코드", "Debug_Code", 146),
                3: ("Public 메소드로부터 반환된 Private 배열", "Private_Array_Return", 150),
                4: ("Private 배열에 Public 데이터 할당", "Public_Data_Assignment", 152)
            },
            "제7절 API 오용": {
                1: ("DNS lookup에 의존한 보안결정", "DNS_Based_Security", 154),
                2: ("취약한 API 사용", "Vulnerable_API", 156)
            }
        }
        
        # 역방향 매핑 (한글 → 영문)
        self.KOREAN_TO_ENGLISH = {}
        # 영문 → 한글 매핑
        self.ENGLISH_TO_KOREAN = {}
        
        # 매핑 테이블 생성
        for section, items in self.GUIDELINE_STRUCTURE.items():
            for num, (korean_name, english_type, page) in items.items():
                self.KOREAN_TO_ENGLISH[korean_name] = english_type
                self.ENGLISH_TO_KOREAN[english_type] = korean_name
        
        # AI가 생성하는 취약점 명칭 → KISIA 타입 매핑
        self.AI_TO_KISIA_MAPPING = {
            # SQL Injection 변형들
            "SQL Injection": "SQL_Injection",
            "SQL 인젝션": "SQL_Injection",
            "SQLi": "SQL_Injection",
            "Database Injection": "SQL_Injection",
            
            # Command Injection 변형들
            "Command Injection": "Command_Injection",
            "OS Command Injection": "Command_Injection",
            "명령어 삽입": "Command_Injection",
            "Shell Injection": "Command_Injection",
            
            # Path Traversal 변형들
            "Path Traversal": "Path_Traversal",
            "Directory Traversal": "Path_Traversal",
            "경로 조작": "Path_Traversal",
            "File Path Injection": "Path_Traversal",
            "../ Attack": "Path_Traversal",
            
            # XSS 변형들
            "Cross-Site Scripting": "XSS",
            "Cross Site Scripting": "XSS",
            "Reflected XSS": "XSS",
            "Stored XSS": "XSS",
            "DOM XSS": "XSS",
            
            # Authentication/Authorization
            "Broken Authentication": "Missing_Authentication",
            "인증 우회": "Missing_Authentication",
            "Missing Authentication": "Missing_Authentication",
            "Insufficient Authorization": "Improper_Authorization",
            "권한 부족": "Improper_Authorization",
            "Privilege Escalation": "Improper_Authorization",
            
            # Hardcoded Secrets
            "Hardcoded Secret": "Hardcoded_Secrets",
            "Hardcoded Password": "Hardcoded_Secrets",
            "Hardcoded API Key": "Hardcoded_Secrets",
            "하드코딩된 비밀": "Hardcoded_Secrets",
            "Embedded Credentials": "Hardcoded_Secrets",
            
            # Cryptography
            "Weak Encryption": "Weak_Cryptography",
            "Weak Cryptography": "Weak_Cryptography",
            "약한 암호화": "Weak_Cryptography",
            "MD5 Usage": "Weak_Cryptography",
            "SHA1 Usage": "Weak_Cryptography",
            "Weak Hash": "Weak_Cryptography",
            
            # Deserialization
            "Insecure Deserialization": "Unsafe_Deserialization",
            "Pickle Vulnerability": "Unsafe_Deserialization",
            "YAML Deserialization": "Unsafe_Deserialization",
            "안전하지 않은 역직렬화": "Unsafe_Deserialization",
            
            # 기타
            "XXE": "XXE",
            "XML External Entity": "XXE",
            "CSRF": "CSRF",
            "SSRF": "SSRF",
            "Race Condition": "TOCTOU",
            "경쟁 조건": "TOCTOU",
            "Debug Mode": "Debug_Code",
            "디버그 모드": "Debug_Code",
        }
    
    def get_kisia_type(self, ai_vuln_type: str) -> str:
        """AI가 생성한 취약점 타입을 KISIA 표준 타입으로 변환"""
        # 정확한 매칭 시도
        if ai_vuln_type in self.AI_TO_KISIA_MAPPING:
            return self.AI_TO_KISIA_MAPPING[ai_vuln_type]
        
        # 부분 매칭 시도
        ai_lower = ai_vuln_type.lower()
        for ai_type, kisia_type in self.AI_TO_KISIA_MAPPING.items():
            if ai_type.lower() in ai_lower or ai_lower in ai_type.lower():
                return kisia_type
        
        # 키워드 기반 추측
        if any(keyword in ai_lower for keyword in ['sql', 'query', 'database']):
            return "SQL_Injection"
        elif any(keyword in ai_lower for keyword in ['xss', 'script', 'cross-site']):
            return "XSS"
        elif any(keyword in ai_lower for keyword in ['command', 'os', 'shell', 'exec']):
            return "Command_Injection"
        elif any(keyword in ai_lower for keyword in ['path', 'directory', 'traversal', '../']):
            return "Path_Traversal"
        elif any(keyword in ai_lower for keyword in ['hardcode', 'secret', 'password', 'api']):
            return "Hardcoded_Secrets"
        elif any(keyword in ai_lower for keyword in ['deserial', 'pickle', 'yaml']):
            return "Unsafe_Deserialization"
        elif any(keyword in ai_lower for keyword in ['auth']):
            return "Missing_Authentication" if 'missing' in ai_lower else "Improper_Authorization"
        
        # 매칭 실패 시 None
        return None
    
    def get_section_info(self, kisia_type: str) -> dict:
        """KISIA 타입으로 섹션 정보 조회"""
        for section, items in self.GUIDELINE_STRUCTURE.items():
            for num, (korean_name, english_type, page) in items.items():
                if english_type == kisia_type:
                    return {
                        'section': section,
                        'number': num,
                        'korean_name': korean_name,
                        'english_type': english_type,
                        'page': page
                    }
        return None
    
    def get_all_kisia_types(self) -> list:
        """모든 KISIA 취약점 타입 목록"""
        return list(self.ENGLISH_TO_KOREAN.keys())