# rag/vulnerability_type_mapper.py
"""
취약점 타입 매핑 테이블 - 70개 취약점 완전 매핑
AI가 생성하는 다양한 취약점 명칭을 벡터 DB의 표준 타입으로 매핑
"""

class VulnerabilityTypeMapper:
    """취약점 타입 매핑 및 검색 전략"""
    
    def __init__(self):
        # KISIA 가이드라인에 있는 표준 취약점 타입들
        self.STANDARD_TYPES = {
            'SQL_Injection',
            'XSS', 
            'Path_Traversal',
            'Deserialization',
            'General'
        }
        
        # 70개 취약점을 표준 타입으로 매핑 (최대한 많은 변형 포함)
        self.TYPE_MAPPING = {
            # ============ SQL Injection 관련 ============
            'SQL Injection': 'SQL_Injection',
            'SQL 인젝션': 'SQL_Injection',
            'SQL주입': 'SQL_Injection',
            'SQLi': 'SQL_Injection',
            'Database Injection': 'SQL_Injection',
            'Query Injection': 'SQL_Injection',
            'DB Injection': 'SQL_Injection',
            '데이터베이스 인젝션': 'SQL_Injection',
            '쿼리 인젝션': 'SQL_Injection',
            'NoSQL Injection': 'SQL_Injection',
            'MongoDB Injection': 'SQL_Injection',
            'Redis Injection': 'SQL_Injection',
            
            # ============ XSS 관련 ============
            'XSS': 'XSS',
            'Cross-Site Scripting': 'XSS',
            'Cross Site Scripting': 'XSS',
            'Reflected XSS': 'XSS',
            'Stored XSS': 'XSS',
            'DOM XSS': 'XSS',
            'DOM-based XSS': 'XSS',
            '크로스 사이트 스크립팅': 'XSS',
            '크로스사이트 스크립팅': 'XSS',
            'Script Injection': 'XSS',
            'HTML Injection': 'XSS',
            'Javascript Injection': 'XSS',
            
            # ============ Path Traversal 관련 ============
            'Path Traversal': 'Path_Traversal',
            'Directory Traversal': 'Path_Traversal',
            'Path Manipulation': 'Path_Traversal',
            'File Path Injection': 'Path_Traversal',
            '경로 조작': 'Path_Traversal',
            '경로조작': 'Path_Traversal',
            '디렉토리 탐색': 'Path_Traversal',
            '디렉터리 탐색': 'Path_Traversal',
            '파일 경로 조작': 'Path_Traversal',
            '../ Traversal': 'Path_Traversal',
            'LFI': 'Path_Traversal',
            'Local File Inclusion': 'Path_Traversal',
            
            # ============ Deserialization 관련 ============
            'Insecure Deserialization': 'Deserialization',
            'Unsafe Deserialization': 'Deserialization',
            'Pickle Vulnerability': 'Deserialization',
            'Pickle Injection': 'Deserialization',
            'YAML Deserialization': 'Deserialization',
            'YAML Injection': 'Deserialization',
            '안전하지 않은 역직렬화': 'Deserialization',
            '역직렬화 취약점': 'Deserialization',
            'Object Injection': 'Deserialization',
            
            # ============ 기타 모든 취약점 → General ============
            # 인젝션 취약점들
            'Command Injection': 'General',
            'OS Command Injection': 'General',
            '명령어 삽입': 'General',
            '명령어삽입': 'General',
            '명령 삽입': 'General',
            'LDAP Injection': 'General',
            'XPath Injection': 'General',
            'Template Injection': 'General',
            'SSTI': 'General',
            'Server Side Template Injection': 'General',
            'Code Injection': 'General',
            'Code Execution': 'General',
            'Remote Code Execution': 'General',
            'RCE': 'General',
            'eval() vulnerability': 'General',
            'exec() vulnerability': 'General',
            'Header Injection': 'General',
            'HTTP Header Injection': 'General',
            'Log Injection': 'General',
            'Log Forging': 'General',
            
            # 인증/인가 취약점들
            'Broken Authentication': 'General',
            '약한 인증': 'General',
            '인증 우회': 'General',
            'Session Fixation': 'General',
            '세션 고정': 'General',
            'Insufficient Authorization': 'General',
            'Missing Authorization': 'General',
            '권한 검사 누락': 'General',
            '인가 부족': 'General',
            'Privilege Escalation': 'General',
            '권한 상승': 'General',
            '권한상승': 'General',
            'JWT Vulnerability': 'General',
            'JWT 취약점': 'General',
            'JWT None Algorithm': 'General',
            'OAuth Vulnerability': 'General',
            'OAuth 취약점': 'General',
            '2FA Bypass': 'General',
            'MFA Bypass': 'General',
            'Password Reset Poisoning': 'General',
            '패스워드 재설정 취약점': 'General',
            'Account Takeover': 'General',
            '계정 탈취': 'General',
            
            # 데이터 노출 취약점들
            'Hardcoded Secret': 'General',
            'Hardcoded Secrets': 'General',
            'Hardcoded Password': 'General',
            'Hardcoded Credential': 'General',
            'Hardcoded API Key': 'General',
            '하드코딩된 비밀': 'General',
            '하드코딩된 비밀번호': 'General',
            '하드코딩된 시크릿': 'General',
            'Information Disclosure': 'General',
            'Info Disclosure': 'General',
            '정보 노출': 'General',
            '정보노출': 'General',
            'Sensitive Data in URL': 'General',
            'Sensitive Data in Logs': 'General',
            'Error Message Leakage': 'General',
            'Stack Trace Disclosure': 'General',
            'Source Code Disclosure': 'General',
            'Backup File Exposure': 'General',
            'API Key in Client': 'General',
            
            # 암호화 취약점들
            'Weak Encryption': 'General',
            'Weak Cryptography': 'General',
            '약한 암호화': 'General',
            '취약한 암호화': 'General',
            'Weak Hash': 'General',
            'Weak Hashing': 'General',
            'MD5 Usage': 'General',
            'SHA1 Usage': 'General',
            'DES Usage': 'General',
            'Insufficient Key Length': 'General',
            '짧은 키 길이': 'General',
            'Hardcoded Encryption Key': 'General',
            'Hardcoded Key': 'General',
            '하드코딩된 암호키': 'General',
            'Predictable Random': 'General',
            'Weak Random': 'General',
            'Insecure Random': 'General',
            '예측 가능한 난수': 'General',
            'Missing Encryption': 'General',
            '암호화 누락': 'General',
            '평문 저장': 'General',
            'Plaintext Storage': 'General',
            'Weak Password Storage': 'General',
            'Weak Password Hash': 'General',
            '약한 패스워드 저장': 'General',
            'No Salt': 'General',
            'Missing Salt': 'General',
            'ECB Mode': 'General',
            'ECB Mode Usage': 'General',
            'IV Reuse': 'General',
            'Initialization Vector Reuse': 'General',
            
            # 입력 검증 취약점들
            'XXE': 'General',
            'XML External Entity': 'General',
            'SSRF': 'General',
            'Server-Side Request Forgery': 'General',
            'Server Side Request Forgery': 'General',
            'CSRF': 'General',
            'Cross-Site Request Forgery': 'General',
            'Cross Site Request Forgery': 'General',
            'File Upload': 'General',
            'File Upload Vulnerability': 'General',
            'Unrestricted File Upload': 'General',
            '파일 업로드 취약점': 'General',
            'Zip Bomb': 'General',
            '압축 폭탄': 'General',
            'ReDoS': 'General',
            'Regex DoS': 'General',
            'Regular Expression DoS': 'General',
            '정규식 서비스 거부': 'General',
            'Integer Overflow': 'General',
            '정수 오버플로우': 'General',
            'Buffer Overflow': 'General',
            '버퍼 오버플로우': 'General',
            'Format String': 'General',
            'Format String Vulnerability': 'General',
            
            # 비즈니스 로직 취약점들
            'Race Condition': 'General',
            '경쟁 상태': 'General',
            '경쟁상태': 'General',
            'TOCTOU': 'General',
            'Time-of-check Time-of-use': 'General',
            'Business Logic Bypass': 'General',
            '비즈니스 로직 우회': 'General',
            'Insufficient Rate Limiting': 'General',
            'Missing Rate Limiting': 'General',
            '속도 제한 부재': 'General',
            'Price Manipulation': 'General',
            '가격 조작': 'General',
            'Quantity Manipulation': 'General',
            '수량 조작': 'General',
            'Workflow Bypass': 'General',
            '프로세스 우회': 'General',
            'Forced Browsing': 'General',
            '강제 브라우징': 'General',
            
            # 설정 및 배포 취약점들
            'Debug Mode Enabled': 'General',
            'Debug Mode': 'General',
            '디버그 모드': 'General',
            '디버그 모드 활성화': 'General',
            'Default Credentials': 'General',
            'Default Password': 'General',
            '기본 자격증명': 'General',
            '기본 패스워드': 'General',
            'Unnecessary Services': 'General',
            '불필요한 서비스': 'General',
            'Misconfigured CORS': 'General',
            'CORS Misconfiguration': 'General',
            'CORS 설정 오류': 'General',
            'Missing Security Headers': 'General',
            '보안 헤더 누락': 'General',
            'Insecure Cookies': 'General',
            '안전하지 않은 쿠키': 'General',
            'Missing HttpOnly': 'General',
            'Missing Secure Flag': 'General',
            'Unencrypted Communication': 'General',
            'HTTP Usage': 'General',
            'Plain HTTP': 'General',
            '암호화되지 않은 통신': 'General',
            
            # 기타 취약점들
            'Prototype Pollution': 'General',
            '프로토타입 오염': 'General',
            'Clickjacking': 'General',
            '클릭재킹': 'General',
            'Open Redirect': 'General',
            'Open Redirection': 'General',
            '오픈 리다이렉트': 'General',
            'DNS Rebinding': 'General',
            'WebSocket Vulnerability': 'General',
            'WebSocket 취약점': 'General',
            'GraphQL Injection': 'General',
            'SSI Injection': 'General',
            'Server-Side Includes Injection': 'General',
            'CSV Injection': 'General',
            'CSV Formula Injection': 'General',
            'Memory Leak': 'General',
            '메모리 누수': 'General',
            '메모리 릭': 'General',
        }
        
        # 각 타입별 우선 검색 컬렉션 (중요도 순)
        self.COLLECTION_PRIORITY = {
            'SQL_Injection': ['kisia_vulnerabilities', 'kisia_code_examples', 'kisia_chunks'],
            'XSS': ['kisia_vulnerabilities', 'kisia_code_examples', 'kisia_chunks'],
            'Path_Traversal': ['kisia_vulnerabilities', 'kisia_code_examples', 'kisia_chunks'],
            'Deserialization': ['kisia_vulnerabilities', 'kisia_code_examples', 'kisia_chunks'],
            'General': ['kisia_chunks', 'kisia_vulnerabilities', 'kisia_recommendations']
        }
        
        # 각 타입별 검색 키워드 (쿼리 생성용)
        self.SEARCH_KEYWORDS = {
            'SQL_Injection': [
                'SQL', 'SQL 인젝션', 'SQL Injection', 'SQLi',
                '쿼리', 'query', 'database', '데이터베이스',
                '파라미터 바인딩', 'parameter binding', 'prepared statement',
                'execute', 'cursor', 'SELECT', 'INSERT', 'UPDATE', 'DELETE'
            ],
            'XSS': [
                'XSS', 'Cross-Site Scripting', '크로스 사이트 스크립팅',
                'script', 'HTML', 'JavaScript', '스크립트',
                '이스케이프', 'escape', 'sanitize', '삭제',
                'innerHTML', 'document.write', 'eval'
            ],
            'Path_Traversal': [
                '경로', 'path', 'directory', '디렉토리', '디렉터리',
                '../', '..\\', 'traversal', '탐색',
                '파일', 'file', 'LFI', 'include',
                'os.path', 'open(', 'readfile'
            ],
            'Deserialization': [
                'pickle', 'yaml', 'json', '역직렬화', 'deserialize',
                'loads', 'load', 'unpickle', 'marshal',
                'serialize', '직렬화', 'object', '객체'
            ],
            'General': []  # 원본 취약점 타입 그대로 사용
        }
    
    def normalize_vuln_type(self, vuln_type: str) -> str:
        """
        AI가 생성한 취약점 타입을 표준 타입으로 변환
        
        Args:
            vuln_type: AI가 생성한 취약점 타입 문자열
            
        Returns:
            표준 취약점 타입 (STANDARD_TYPES 중 하나)
        """
        # 정확한 매칭 먼저 시도
        if vuln_type in self.STANDARD_TYPES:
            return vuln_type
        
        # 매핑 테이블에서 찾기
        if vuln_type in self.TYPE_MAPPING:
            return self.TYPE_MAPPING[vuln_type]
        
        # 부분 매칭 시도 (대소문자 무시)
        vuln_type_lower = vuln_type.lower()
        for ai_type, standard_type in self.TYPE_MAPPING.items():
            if ai_type.lower() in vuln_type_lower or vuln_type_lower in ai_type.lower():
                return standard_type
        
        # 키워드 기반 추측 (더 많은 키워드)
        if any(keyword in vuln_type_lower for keyword in ['sql', 'query', 'database', '쿼리']):
            return 'SQL_Injection'
        elif any(keyword in vuln_type_lower for keyword in ['xss', 'script', 'cross-site', 'cross site']):
            return 'XSS'
        elif any(keyword in vuln_type_lower for keyword in ['path', 'traversal', 'directory', '경로', '디렉']):
            return 'Path_Traversal'
        elif any(keyword in vuln_type_lower for keyword in ['deserial', 'pickle', 'yaml', '역직렬']):
            return 'Deserialization'
        
        # 기본값
        return 'General'
    
    def get_search_collections(self, vuln_type: str) -> list:
        """
        취약점 타입에 따른 우선 검색 컬렉션 반환
        
        Args:
            vuln_type: 표준화된 취약점 타입
            
        Returns:
            검색할 컬렉션 이름 리스트 (우선순위 순)
        """
        standard_type = self.normalize_vuln_type(vuln_type)
        return self.COLLECTION_PRIORITY.get(standard_type, ['kisia_vulnerabilities', 'kisia_chunks'])
    
    def get_search_query(self, vuln_type: str, original_type: str = None) -> str:
        """
        취약점 타입에 최적화된 검색 쿼리 생성
        
        Args:
            vuln_type: 표준화된 취약점 타입
            original_type: AI가 원래 생성한 타입 (선택적)
            
        Returns:
            검색 쿼리 문자열
        """
        standard_type = self.normalize_vuln_type(vuln_type)
        keywords = self.SEARCH_KEYWORDS.get(standard_type, [])
        
        # 원본 타입도 포함
        if original_type and original_type != standard_type:
            # 원본 타입의 주요 키워드 추출
            query_parts = [original_type]
            # 표준 키워드 중 일부 추가
            if keywords:
                query_parts.extend(keywords[:2])
        else:
            # 표준 타입과 키워드 사용
            if keywords:
                query_parts = keywords[:3]
            else:
                query_parts = [standard_type.replace('_', ' ')]
        
        # 중복 제거 후 결합
        unique_parts = []
        for part in query_parts:
            if part and part not in unique_parts:
                unique_parts.append(part)
        
        return ' '.join(unique_parts[:4])  # 최대 4개 키워드
    
    def get_metadata_filter(self, vuln_type: str) -> dict:
        """
        ChromaDB where 절에 사용할 메타데이터 필터 생성
        
        Args:
            vuln_type: 표준화된 취약점 타입
            
        Returns:
            ChromaDB where 절 딕셔너리
        """
        standard_type = self.normalize_vuln_type(vuln_type)
        
        # vulnerability_types 필드가 있는 컬렉션용 필터
        # General도 포함하여 더 많은 결과 확보
        return {
            "$or": [
                {"vulnerability_types": {"$contains": standard_type}},
                {"vulnerability_types": {"$contains": "General"}}
            ]
        }


# 테스트 코드
if __name__ == "__main__":
    mapper = VulnerabilityTypeMapper()
    
    # 다양한 테스트 케이스들
    test_cases = [
        # 인젝션 취약점들
        "SQL Injection",
        "Command Injection",
        "LDAP Injection",
        "Template Injection",
        
        # 인증/인가
        "Hardcoded Secret",
        "Broken Authentication",
        "JWT Vulnerability",
        "권한 상승",
        
        # 데이터 노출
        "Information Disclosure",
        "하드코딩된 비밀번호",
        
        # 암호화
        "Weak Cryptography",
        "약한 암호화",
        "MD5 Usage",
        
        # XSS
        "Cross-Site Scripting",
        "Reflected XSS",
        
        # Path Traversal
        "Directory Traversal",
        "../ Traversal",
        
        # 역직렬화
        "Insecure Deserialization",
        "Pickle Vulnerability",
        
        # 기타
        "CSRF",
        "Race Condition",
        "Debug Mode Enabled"
    ]
    
    print("="*80)
    print("취약점 타입 매핑 테스트 (70개 취약점 대응)")
    print("="*80)
    
    # 타입별 통계
    type_counts = {'SQL_Injection': 0, 'XSS': 0, 'Path_Traversal': 0, 
                   'Deserialization': 0, 'General': 0}
    
    for vuln_type in test_cases:
        normalized = mapper.normalize_vuln_type(vuln_type)
        collections = mapper.get_search_collections(vuln_type)
        query = mapper.get_search_query(normalized, vuln_type)
        
        type_counts[normalized] += 1
        
        print(f"\n원본: {vuln_type}")
        print(f"  → 표준 타입: {normalized}")
        print(f"  → 검색 컬렉션: {collections[:2]}")  # 처음 2개만 표시
        print(f"  → 검색 쿼리: {query}")
    
    print("\n" + "="*80)
    print("매핑 통계:")
    for stype, count in type_counts.items():
        print(f"  {stype}: {count}개")
    
    print(f"\n총 매핑 항목: {len(mapper.TYPE_MAPPING)}개")